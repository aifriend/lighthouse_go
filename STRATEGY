APRENDIZAJE
===========
1) Cargamos el mapa:
    - Generamos una representacion de este adecuada para el aprendizaje.

2) Cargamos los parametros (CONFIG) para el aprendizaje exclusivamente

3) Creamos el juego:
    - El BOTPLAYER debe de entrar en el LHGAME
    - LHGAME llama a BOTPLAYER para que ejecute LIGHTGO

4) Aprendemos a jugar con el (COACH). No hay rondas.
    - El aprendizaje solo puede contar con la informacion que le envia BOTPLAYER


JUEGO
=====
1) Inicializamos el jugador:
    El motor envía el siguiente mensaje (ejemplo):
    {
        "player_num": 0,
        "player_count": 2,
        "position": [1, 2],
        "map": [
            [0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0],
            [0, 1, 1, 0, 0],
            [0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0]],
        "lighthouses": [
            [1, 1], [3, 1], [2, 3], [1, 3]
        ]
    }
    - Mapa: (0 -> No jugable y 1-> jugable)
    	"map": [
		[0, 0, 0, 0, 0],
		[0, 1, 1, 1, 0],
		[0, 1, 1, 0, 0],
		[0, 1, 1, 0, 0],
		[0, 0, 0, 0, 0]],
    - Aprovechamos esta información para cargar la modelo de de juego aprendido
        - rank del mapa (size)
        - ¿generar mapa de energias entorno a los faros?

2) Respondemos por turnos:
    - Con la respuesta que nos de la red en base a los unicos parametros de entrada que tenemos -> ENCODER:
    {
        "position": [1, 3],
        "score": 36,
        "energy": 66,
        "lighthouses": [
            {
                "position": [1, 1],
                "owner": 0,
                "energy": 30,
                "connections": [[1, 3]],
                "have_key": false
            },
            {
                "position": [3, 1],
                "owner": -1,
                "energy": 0,
                "connections": [],
                "have_key": false
            },
            {
                "position": [2, 3],
                "owner": 1,
                "energy": 90,
                "connections": [],
                "have_key": false
            },
            {
                "position": [1, 3],
                "owner": 0,
                "energy": 50,
                "connections": [[1, 1]],
                "have_key": true
            }
        ],
        "view": [
            [-1,-1,-1, 0,-1,-1,-1],
            [-1, 0, 0,50,23,50,-1],
            [-1, 0, 0,32,41, 0,-1],
            [ 0, 0, 0,XX,50, 0, 0],
            [-1, 0, 0, 0, 0, 0,-1],
            [-1, 0, 0, 0, 0, 0,-1],
            [-1,-1,-1, 0,-1,-1,-1]
        ],
    }

    ENCODER
    -> Actual:
    [e.player, e.a_type, e.health, e.carry, e.gold, e.timeout]

    -> Propuesto:
    [timeout] (timeout)

    [energia] (health)

    [player] (player)
    0 -> player 1
    -0 -> player 2

    [View] (gold)
    [-1,-1,-1, 0,-1,-1,-1],
    [-1, 0, 0,50,23,50,-1],
    [-1, 0, 0,32,41, 0,-1],
    [ 0, 0, 0,XX,50, 0, 0],
    [-1, 0, 0, 0, 0, 0,-1],
    [-1, 0, 0, 0, 0, 0,-1],
    [-1,-1,-1, 0,-1,-1,-1]
    Es un mapa de la energía disponible en las celdas cercanas al jugador.
    Nominalmente es de 7x7, conteniendo las casillas a distancia 3 o menos del
    jugador. Los bots deben tolerar que este valor varíe, pero siempre se dará
    el caso de que "view" es una matriz cuadrada de dimensión impar, y la posición
    del bot corresponde a la casilla del medio de la matriz (XX). Las celdas fuera
    del radio 3 se devuelven como -1 para indicar que no hay datos. Las celdas que
    no forman parte de la isla se devuelven como 0 ya que nunca pueden contener
    energía (las casillas que sí forman parte de la isla pero no tienen energía
    también se devuelven como 0). Ya que el jugador obtiene la energía de la
    casilla central al comienzo de cada ronda, esta siempre tendrá un valor de 0.
    El mensaje describe los faros siguientes:

    [Faros] (carry)
    X  X  X  X  X
    X 50 90  X  X
    X  |     X  X
    X 30     0  X
    X  X  X  X  X
    Ademas de su posición, cada número indica la energía del faro.
    Los faros con energía == 50, 30 están controlados por el jugador 0 y
    conectados entre sí, y el faro con energía == 90 está controlado por
    el jugador 1. Además, el jugador 0 tiene la clave del faro con energía 50
    (es de suponer que visitó el faro 30 para obtener su clave, y luego el 50
    para conectarlo al 30, perdiendo la clave del 30 en el proceso, pero ahora
    dispone de la clave del 50 por estar situado sobre el).

    [Faros-distancia] (dist?) -> LH Distances

    [Faros-conexiones] (conn?) -> LH Connections

    [Faros-poligonos] (tri?) -> LH Poligons

    [Score] (V) -> Board score

    [Pi/count] (Pi) -> Player moves probability