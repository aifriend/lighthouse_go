11, 11 -> 11, 10
12, 11 -> 13, 10
11, 10 -> 11, 9

while True
	pre-round(1): i_energy & decay_lh
	pre-player: p_keys & p_energy
	turn: move
	post-player: p_score
	view.update

while True
	pre-round: i_energy, p_keys & p_energy, decay_lh
	view.update
		turn: move
		view.update
	post-round: p_score

===
pre-round: 
	i_energy
	p_energy: 0
view.update
turn
view.update
===
pre-player: 
	p_energy: 0
turn
	13,11 -> 14,10
view.update

----

1 .. -1 *  1 =>  1 .. -1
1 .. -1 * -1 => -1 .. 1

----

moves = []
pieces = np.zeros((18, 21, Configuration.NUM_ENCODERS))
pieces[11, 13, Configuration.P_NAME_IDX] = 1


moves = []
pieces = np.zeros((3, 4, 3))

"""
    - 0         - 1         - 2          - 3
0 - (0 1 2)     (3 4 5)     (6 7 8)      (9 10 11) 
1 - (12 13 14)  (15 16 17)  (18 19 20)*  (21 22 23) 
2 - (24 25 26)  (27 28 29)  (30 31 32)   (33 34 35) 
"""

# select valid moves
for row in range(3):  # row
    for col in range(4):  # col
        if (col, row) == (2, 1):
            # AVAILABLE ACTION - WK - MOVE
            moves.extend([1])

            # AVAILABLE ACTION - WK - ATTACK
            moves.extend([0])

            # AVAILABLE ACTION - LH - CONN
            moves.extend([1])
        else:
            moves.extend([0] * 3)

for i in range(len(moves)):
    if moves[i]:
        row, col, action_index = np.unravel_index(i, [3, 4, 3], 'C')
        name_action = Configuration.ACTS_REV[action_index]

moves = []

# select valid moves
for row in range(18):
    for col in range(21):
        if (col, row) == (13, 11):
            # AVAILABLE ACTION - WK - MOVE
            moves.extend([1, 1, 1, 1, 1, 1, 0, 0, 0])

            # AVAILABLE ACTION - WK - ATTACK
            moves.extend([0, 0, 1, 1, 1])

            # AVAILABLE ACTION - LH - CONN
            moves.extend([1, 1, 0, 0, 0])
        else:
            moves.extend([0] * Configuration.NUM_ACTS)

for i in range(len(moves)):
    if moves[i]:
        row, col, action_index = np.unravel_index(i, [18, 21, Configuration.NUM_ACTS], 'C')
        name_action = Configuration.ACTS_REV[action_index]

---

